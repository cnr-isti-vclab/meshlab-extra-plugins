name: CreateRelease

on:
  #[push, pull_request] #just for test release scripts
  workflow_dispatch: #manual run
    inputs:
      version:
        description: 'MeshLab Version'
        required: true
        default: 'YYYY.MM'

env:
  QT_VERSION: 5.15.2
  MAC_CERT: ${{secrets.MACOS_CERT_ID}}
  WIN_CERT: ${{secrets.WIN_CERTIFICATE}}

jobs:
  meshlab_plugins_build:
    name: Build MeshLab Extra Plugins
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['ubuntu-20.04', 'macos-latest', 'windows-latest']
        precision: [single_precision, double_precision]
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
    - name: Set CodeSign Certificate macOS
      if: runner.os == 'macOS' && env.MAC_CERT != null
      uses: apple-actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
        p12-password: ${{ secrets.MACOS_CERTIFICATE_PSSW }}
    - name: Set CodeSign Certificate Windows
      if: runner.os == 'Windows' && env.WIN_CERT != null
      run: |
        New-Item -ItemType directory -Path certificate
        Set-Content -Path certificate\certificate.txt -Value '${{ secrets.WIN_CERTIFICATE }}'
        certutil -decode certificate\certificate.txt certificate\certificate.pfx
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        cache: true
        version: ${{ env.QT_VERSION }}
    - name: Install dependencies
      shell: bash
      run: |
        bash scripts/${{ runner.os }}/0_setup_env.sh --dont_install_qt --dont_install_cgal_and_boost
    - name: Setup env variables
      id: envs
      shell: bash
      run: |
        if [ "${{matrix.precision}}" == "double_precision" ]; then
          echo "artifact_suffix=_double" >> $GITHUB_OUTPUT
        else
          echo "artifact_suffix=" >> $GITHUB_OUTPUT
        fi
    - name: Configure and Build
      shell: bash
      run: |
        bash scripts/${{ runner.os }}/1_build.sh --${{ matrix.precision }}
    - name: Upload MeshLab Extra Plugins
      uses: actions/upload-artifact@v3
      with:
        name: MeshLab_${{ runner.os }}_extra_plugins${{steps.envs.outputs.artifact_suffix}}
        path: install/meshlab/plugins


  #after building MeshLab for the three platforms, we create a release in github
  create_release:
    name: Create Release
    needs: [meshlab_plugins_build]
    runs-on: ubuntu-latest
    steps:

    #Download Linux Packages
    - name: Download Linux ZIP
      uses: actions/download-artifact@v3
      with:
        name: MeshLab_Linux_extra_plugins
        path: MeshLab_Linux_extra_plugins
    - name: Download Linux ZIP double
      uses: actions/download-artifact@v3
      with:
        name: MeshLab_Linux_extra_plugins_double
        path: MeshLab_Linux_extra_plugins_double
    - name: Create Linux Archive
      run: |
        mv MeshLab_Linux_extra_plugins MeshLab-Extra-Plugins-${{ github.event.inputs.version }}-linux
        tar -cvzf MeshLab-Extra-Plugins-${{ github.event.inputs.version }}-linux.tar.gz MeshLab-Extra-Plugins-${{ github.event.inputs.version }}-linux/
        mv MeshLab_Linux_extra_plugins_double MeshLab-Extra-Plugins-${{ github.event.inputs.version }}d-linux
        tar -cvzf MeshLab-Extra-Plugins-${{ github.event.inputs.version }}d-linux.tar.gz MeshLab-Extra-Plugins-${{ github.event.inputs.version }}d-linux/

    #Download MacOS Packages
    - name: Download MacOS ZIP
      uses: actions/download-artifact@v3
      with:
        name: MeshLab_macOS_extra_plugins
        path: MeshLab_macOS_extra_plugins
    - name: Download MacOS ZIP double
      uses: actions/download-artifact@v3
      with:
        name: MeshLab_macOS_extra_plugins_double
        path: MeshLab_macOS_extra_plugins_double
    - name: Create MacOS Archive
      run: |
        mv MeshLab_macOS_extra_plugins MeshLab-Extra-Plugins-${{ github.event.inputs.version }}-macos
        zip -r MeshLab-Extra-Plugins-${{ github.event.inputs.version }}-macos.zip MeshLab-Extra-Plugins-${{ github.event.inputs.version }}-macos/
        mv MeshLab_macOS_extra_plugins_double MeshLab-Extra-Plugins-${{ github.event.inputs.version }}d-macos
        zip -r MeshLab-Extra-Plugins-${{ github.event.inputs.version }}d-macos.zip MeshLab-Extra-Plugins-${{ github.event.inputs.version }}d-macos/

    #Download MacOS Packages
    - name: Download Windows ZIP
      uses: actions/download-artifact@v3
      with:
        name: MeshLab_Windows_extra_plugins
        path: MeshLab_Windows_extra_plugins
    - name: Download Windows ZIP double
      uses: actions/download-artifact@v3
      with:
        name: MeshLab_Windows_extra_plugins_double
        path: MeshLab_Windows_extra_plugins_double
    - name: Create MacOS Archive
      run: |
        mv MeshLab_Windows_extra_plugins MeshLab-Extra-Plugins-${{ github.event.inputs.version }}-windows
        zip -r MeshLab-Extra-Plugins-${{ github.event.inputs.version }}-windows.zip MeshLab-Extra-Plugins-${{ github.event.inputs.version }}-windows/
        mv MeshLab_Windows_extra_plugins_double MeshLab-Extra-Plugins-${{ github.event.inputs.version }}d-windows
        zip -r MeshLab-Extra-Plugins-${{ github.event.inputs.version }}d-windows.zip MeshLab-Extra-Plugins-${{ github.event.inputs.version }}d-windows/

    #Create release and upload
    - uses: "ncipollo/release-action@v1"
      with:
        token: "${{ secrets.GITHUB_TOKEN }}"
        tag: "Meshlab-Extra-Plugins-${{ github.event.inputs.version }}"
        prerelease: false
        name: "Meshlab-Extra-Plugins-${{ github.event.inputs.version }}"
        artifacts: |
          MeshLab-Extra-Plugins-${{ github.event.inputs.version }}-linux.tar.gz
          MeshLab-Extra-Plugins-${{ github.event.inputs.version }}d-linux.tar.gz
          MeshLab-Extra-Plugins-${{ github.event.inputs.version }}-macos.zip
          MeshLab-Extra-Plugins-${{ github.event.inputs.version }}d-macos.zip
          MeshLab-Extra-Plugins-${{ github.event.inputs.version }}-windows.zip
          MeshLab-Extra-Plugins-${{ github.event.inputs.version }}d-windows.zip
